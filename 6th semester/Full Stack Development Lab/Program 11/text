text

odule-4&5-Programs
Module-4
1. For students enrolment developed in Module 2, create a generic class view which displays list of students and detailview that displays student details for any selected student in the list.
models.py
from django.db import models
# Create your models here.
class Course(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    def str (self):
        return self.name
class Student(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    courses = models.ManyToManyField(Course, related_name='students')
    def str (self):
        return self.name
migrate and enter data in both tables using admin interface and register students with some courses:
views.py:
class StudentListView(ListView):
    model = Student
    template_name = 'student_list.html'  # Specify your template name
    context_object_name = 'students'
class StudentDetailView(DetailView):
    model = Student
    template_name = 'student_detail.html'  # Specify your template name
    context_object_name = 'student'
templates:
student_list.html
<!DOCTYPE html>
<html>
<head>
    <title>Student List</title>
</head>
<body>
    <h1>Student List from Student Model</h1>
    <ul>
        {% for student in students %}
            <li>
                <a href="{% url 'student_detail' student.pk %}">{{ student.name }}</a>
            </li>
        {% endfor %}
    </ul>
</body>
</html>
student_detail.html
<!DOCTYPE html>
<html>
<head>
    <title>Student Detail</title>
</head>
<body>
    <h1>========================={{ student.name }}=============================</h1>
    <p>Email: {{ student.email }}</p>
    <h2>================Registered Course====================</h2>
    <ul>
        {% for course in student.courses.all %}
            <li>{{ course.name }}</li><br>
            <b> Description : {{ course.description }}</b>
        {% endfor %}
    </ul>
    <a href="{% url 'student_list' %}">Back to Student List</a>
</body>
</html>
urls.py:
urlpatterns =[
    path('admin/', admin.site.urls),
    path('student_list/', views.StudentListView.as_view(), name='student_list'),
    path('student/<int:pk>/', views.StudentDetailView.as_view(),name='student_detail'),
    ]
2. Develop example Django app that performs CSV and PDF generation for any models created in previous laboratory component.
models.py
same as previous
views.py
import csv
from django.http import HttpResponse
from django.shortcuts import render
from Module4_genericViews.models import Course, Student
from reportlab.pdfgen import canvas
def generate_csv_response(request):
    queryset = Student.objects.all() # Get data from your models
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="student_data.csv"'
    writer = csv.writer(response)
    # Write header row based on model fields using List comprehension
    writer.writerow([field.name for field in queryset.model._meta.fields])
    # Write data rows
    for obj in queryset:
        writer.writerow([getattr(obj, field.name) for field in queryset.model._meta.fields])
    return response
def generate_pdf_response(request):
    queryset = Student.objects.all()
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="student_pdfdata.pdf"'
    # Create PDF document
    pdf = canvas.Canvas(response)
    y = 800 # Initial y position for writing text
    pdf.setFont("Helvetica-Bold", 12)
    pdf.drawString(100, y, "Student Data")
    # Write data
    pdf.setFont("Helvetica", 10)
    y -= 30 # Move down for data rows
    for obj in queryset:
        data = f"Name: {obj.name}, Email: {obj.email}" # Customize based on your model fields
       
        if y < 50:  # If we're near the bottom of the page, start a new page
            pdf.showPage()
            y = 800
            pdf.setFont("Helvetica", 10)
       
        pdf.drawString(100, y, data)
        y -= 15  # Move down for next row
    pdf.showPage()
    pdf.save()
    return response
urls.py
urlpatterns =[
            path('admin/', admin.site.urls),
         path('generatecsv/', views.generate_csv_response),
            path('generatepdf/', views.generate_pdf_response),
    ]